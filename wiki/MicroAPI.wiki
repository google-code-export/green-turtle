#summary A Minimally Useful API for RDFa

= Introduction =

This is an attempt to document a usable subset of the RDFa API and extensions that could simplify use and is completely compatible with the [http://www.w3.org/TR/rdfa-api/ RDFa API] as specified.


= Summary =

Document level operations:

|| `document.getElementsByType(uri)` || Returns a list of elements who are typed with the given URI || 
|| `document.getElementsBySubject(uri)` || Returns a list of elements that originate a given subject URI || 
|| `document.data.getSubjects()` || Returns a list of subjects within the document. ||
|| `document.data.getSubject(uri)` || Returns a subject object (extension) ||

Element operations (extension):

|| `element.data` || The subject object for an element, if any. ||
|| `element.data.id` || The subject URI. ||
|| `element.data.types` || The list of types associated with the subject. ||
|| `element.data.getValues(curieOrTerm ...)` || Returns a list of property values that matches the CURIE or TERM arguments. ||

House keeping:

|| `document.data.prefixes` || An array of prefixes currently defined (extension). ||
|| `document.data.getMapping(prefix)` || Returns the prefix mapping, if any (extension). ||
|| `document.data.setMapping(prefix,uri)` || Sets a prefix mapping. ||
|| `document.data.expand(curieOrTerm)` || Expands a CURIE or Term to a URI  (extension). ||
|| `document.data.shorten(URI)` || Shortens a URI to a CURIE or Term (extension). ||

= Examples =

Get the people by type and list their names:

{{{
document.data.setMapping("s","http://schema.org");
var people = document.getElementsByType("s:Person");
for (var i=0; i<people.length; i++) {
   var name = people[i].data.getValues("s:name")[0];
}
}}}

= Subject Objects =

== data.getValues() ==
The `getValues()` method of the subject returns the object values for specific properties.  The method takes a list of URI, CURIE, or terms for predicates and will return any object values associated.  Object values may be literals or other DOM nodes (i.e. XML Literals).

== Properties ==

The subject object also provides full access to the triples for the subject via the properties.  The keys for properties are full URIs and `document.data.expand()` should be used to convert CURIE or Term values into URIs.

The subject object has the following properties:

|| `id` || The subject URI ||
|| `types` || An array of type associated with the subject ||
|| `origins` || An array of elements that are the subject's origin. ||
|| `predicates` || A associative array, keyed by URI, of the properties of the subject. ||

Each predicate returns an object with the following properties:

|| `id` || The predicate URI ||
|| `objects` || The object values of the predicate. ||

Each object is a simple object with the following properties:

|| `value` || The value which may be a literal or DOM node ||
|| `type` || The type of the value. ||
|| `language` || The language associated with the value. ||
|| `origin` || A element in the document that originated the value. ||


= Element Descendant Operations =

There are plenty of subtree operations that can be useful.  For example, finding the first descendant that has a particular subject:

{{{
var subject = "http://www.example.com/id";
var filter = { 
   acceptNode: function(e) {
        return e.data && e.data.id==id ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
   }        
}
var walker = document.createTreeWalker(parent,NodeFilter.SHOW_ELEMENT,filter,false);
var descendant = walker.nextNode() ? walker.currentNode : null;
}}}

As such, these probably don't need to be added to the API.