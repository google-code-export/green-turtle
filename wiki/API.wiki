#summary API Documentation

= Including Scripts =

If you want to use the RDFa API, just include the built RDF.js script.

If you want to use just the RDFa processor, just include the built RDFaProcessor.js script.

If you are not using the packaged all-in-one script or want to use the internal classes, you need to include the separate source files or package them together.

There are three main scripts:

  * `URI.js` - provides the URIResolver base class for RDFaProcessor
  * `RDFaProcessor.js` - provides the RDFaProcessor class
  * `GraphRDFaProcessor.js` - provides the GraphRDFaProcessor class

= RDFa API =

== RDFa.attach() ==

{{{
RDFa.attach(node,update)
}}}

The `RDFa.attach()` function is an instance-less function that is used to run the RDFa processor on a node and added the RDFa API to the document.  The `node` argument is the node to be processed and typically is the document.  

The `update` argument is optional and defaults to false.  A value of `true` indicated that the document is being updated after changes.  A value of true should only be used when you know the document has already been processed.

= Classes =

== RDFaProcessor ==

The `RDFaProcessor` class is the main implementation of the [http://www.w3.org/TR/rdfa-core/#s_sequence RDFa 1.1 Sequence Algorithm].  It provides the ability to process any DOM node into a set of triples (subject, predicate, and object).

The default implementation of the `init()`, `newSubjectOrigin()`, and `addTriple()` methods do not do anything.  This class must be subclassed to receive the RDFa triples.

For example, a callback handler could be implemented by:

{{{

CallbackProcessor.prototype = new RDFaProcessor();
CallbackProcessor.prototype.constructor=RDFaProcessor;
function CallbackProcessor() {
   RDFaProcessor.call(this);
}

CallbackProcessor.prototype.addTriple = function(origin,subject,predicate,object) {
   console.log("New triple: "+subject+", predicate "+predicate+", object "+object.value+", "+object.language+", "+object.type);
   // call the handler here...
}
}}}

A simple use of this class:

{{{

var processor = new RDFaProcessor();
processor.finishedHandlers.push(
   function(node) {
      alert("Done!");
   }
);
processor.process(document);
}}}

=== Constructing ===

{{{
new RDFaProcessor(targetObject)
}}}

The `targetObject` parameter is an optional object use to store data (e.g. prefixes, terms, triples) during the processing of the document.  This object is typically used by subclasses and may be omitted.  If omitted, an object will be created for use by the instance.  This target object is available via the "target" property on the instance.

Processor instances may be reused but, depending on the subclass, the target object may need to be reset.

=== RDFaProcessor.finishedHandlers ===

An instance property that is an array of handlers to call upon completion of processing a node.  The handlers  are a function whose only argument is the node that was processed.

=== RDFaProcessor.process ===

{{{
process(node)
}}}

Performs the [http://www.w3.org/TR/rdfa-core/#s_sequence RDFa 1.1 Sequence algorithm] to harvest triples from the given node.

Upon completion, a set of handlers are called with the node passed as the argument to the method. 

=== RDFaProcessor.init ===

{{{
init()
}}}

Called after construction for further customization.  The default implementation does nothing.  Subclasses may override this method to further initialize the target object.

=== RDFaProcessor.newSubjectOrigin ===

{{{
newSubjectOrigin(origin,subject)
}}}

A method called to notify when a new subject is generated from a particular node.  The `origin` argument is the node from the document which generated the subject.

=== RDFaProcessor.addTriple ===

{{{
addTriple(origin,subject,predicate,object)
}}}

A method called to notify when a new triple is generated.

  * `origin` - the node that generated the triple (node)
  * `subject` - the subject URI (string)
  * `predicate` - the predicate URI (string)
  * `object` - the object value (an object)

The object value is a object with three, possibly empty, properties:

  * `value` - the string value or node
  * `type` - the datatype (string)
  * `language` - the language (string)


== GraphRDFaProcessor ==

The GraphRDFaProcess is a subclass of RDFaProcessor that constructs a graph of the triples.  Any subclass of GraphRDFaProcessor must preserve the semantics of the `init()`, `newSubjectOrigin()`, and `addTriple()` methods implemented on this class.

This class also adds a finished handler that must be preserved.  You may add your own handlers as well as long as you do not remove the one added by this class during the `init()` method call.

The `triplesGraph` is an associative array whose key values are the subject URI values.  Each subject URI maps to an object with the following properties:

  * `subject` - the subject URI,
  * `predicates` - an associative list of predicates.

The value return by accessing a predicate is another object with properties:

  * `predicate` - the predicate URI,
  * `objects` - an array of values.

Each object has the following, possible empty, properties:

  * `value` - the literal value or node,
  * `language` - the language associated with the value,
  * `type` - the datatype associated with the value.


=== Constructing === 

{{{
new GraphRDFaProcessor(targetObject)
}}}

The `targetObject` parameter is an optional object use to store data (i.e. the graph) during the processing of the document.  This parameter may be omitted and an instance will be created for you.  

On the target object, two properties are created:

  * `tripleCount` - a count of the number of triples generated,
  * `triplesGraph` - a graph containing the triples generated.

== URIResolver == 

The `URIResolver` class provides the ability to parse URI values into an object.  That object can then be used normalize, resolve relative URIs, or turn the URI into a relative value.

=== Constructing ===

{{{
new URIResolver()
}}}

=== URIResolver.SCHEME ===

A regular expression for testing for a URI scheme at the start of a string.

=== URIResolver.parseURI ===

{{{
parseURI(uri)
}}}

Parses a URI string value into a URI object.

== URI Objects ==

=== scheme ===

A property containing the URI's scheme.

=== schemeSpecificPart ===

A property containing the URI's scheme specific part (that which is after the colon).

=== isGeneric ===

A flag indicating whether the URI is a generic URI.

=== normalize() ===

A method that will normalize a generic URI and remove redundant path components, slashes, etc.

=== resolve(href) ===

Resolves the `href` string argument against the URI as a base URI.

=== relativeTo(URI) ===

Returns a string value of the URI relative to another URI object.